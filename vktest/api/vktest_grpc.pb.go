// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/vktest.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VKTest_CountOfUsers_FullMethodName       = "/api.VKTest/CountOfUsers"
	VKTest_StreamCountOfUsers_FullMethodName = "/api.VKTest/StreamCountOfUsers"
)

// VKTestClient is the client API for VKTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VKTestClient interface {
	CountOfUsers(ctx context.Context, in *CountOfUsersRequest, opts ...grpc.CallOption) (*CountOfUsersResponse, error)
	StreamCountOfUsers(ctx context.Context, in *CountOfUsersRequest, opts ...grpc.CallOption) (VKTest_StreamCountOfUsersClient, error)
}

type vKTestClient struct {
	cc grpc.ClientConnInterface
}

func NewVKTestClient(cc grpc.ClientConnInterface) VKTestClient {
	return &vKTestClient{cc}
}

func (c *vKTestClient) CountOfUsers(ctx context.Context, in *CountOfUsersRequest, opts ...grpc.CallOption) (*CountOfUsersResponse, error) {
	out := new(CountOfUsersResponse)
	err := c.cc.Invoke(ctx, VKTest_CountOfUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vKTestClient) StreamCountOfUsers(ctx context.Context, in *CountOfUsersRequest, opts ...grpc.CallOption) (VKTest_StreamCountOfUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &VKTest_ServiceDesc.Streams[0], VKTest_StreamCountOfUsers_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &vKTestStreamCountOfUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VKTest_StreamCountOfUsersClient interface {
	Recv() (*CountOfUsersResponse, error)
	grpc.ClientStream
}

type vKTestStreamCountOfUsersClient struct {
	grpc.ClientStream
}

func (x *vKTestStreamCountOfUsersClient) Recv() (*CountOfUsersResponse, error) {
	m := new(CountOfUsersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VKTestServer is the server API for VKTest service.
// All implementations should embed UnimplementedVKTestServer
// for forward compatibility
type VKTestServer interface {
	CountOfUsers(context.Context, *CountOfUsersRequest) (*CountOfUsersResponse, error)
	StreamCountOfUsers(*CountOfUsersRequest, VKTest_StreamCountOfUsersServer) error
}

// UnimplementedVKTestServer should be embedded to have forward compatible implementations.
type UnimplementedVKTestServer struct {
}

func (UnimplementedVKTestServer) CountOfUsers(context.Context, *CountOfUsersRequest) (*CountOfUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountOfUsers not implemented")
}
func (UnimplementedVKTestServer) StreamCountOfUsers(*CountOfUsersRequest, VKTest_StreamCountOfUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamCountOfUsers not implemented")
}

// UnsafeVKTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VKTestServer will
// result in compilation errors.
type UnsafeVKTestServer interface {
	mustEmbedUnimplementedVKTestServer()
}

func RegisterVKTestServer(s grpc.ServiceRegistrar, srv VKTestServer) {
	s.RegisterService(&VKTest_ServiceDesc, srv)
}

func _VKTest_CountOfUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountOfUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VKTestServer).CountOfUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VKTest_CountOfUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VKTestServer).CountOfUsers(ctx, req.(*CountOfUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VKTest_StreamCountOfUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CountOfUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VKTestServer).StreamCountOfUsers(m, &vKTestStreamCountOfUsersServer{stream})
}

type VKTest_StreamCountOfUsersServer interface {
	Send(*CountOfUsersResponse) error
	grpc.ServerStream
}

type vKTestStreamCountOfUsersServer struct {
	grpc.ServerStream
}

func (x *vKTestStreamCountOfUsersServer) Send(m *CountOfUsersResponse) error {
	return x.ServerStream.SendMsg(m)
}

// VKTest_ServiceDesc is the grpc.ServiceDesc for VKTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VKTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.VKTest",
	HandlerType: (*VKTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountOfUsers",
			Handler:    _VKTest_CountOfUsers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCountOfUsers",
			Handler:       _VKTest_StreamCountOfUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/vktest.proto",
}
